	---------------
	Usage
	---------------

Usage

* Plugin configuration

	You should specify the version in your project's plugin configuration:

+---------------------
<project>
  ...
  <build>
    <!-- To use the plugin goals, add the following in your POM or parent POM -->
    <plugins>
      <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <version>${project.version}</version>
	<configuration>
		<!--
		<packageName>my-package</packageName>
		<packageVersion>1.0.0</packageVersion>
		...
		-->
	</configuration>
      </plugin>
      ...
    </plugins>
  </build>
  ...
</project>
+---------------------

	The plugin accepts the following configuration parameters (most of them have reasonable default values):

*------------------*-----------------------*------------------------*-----------*------------------------*
| <<POM setting>>  | <<Command line argument>> | <<Description>>        | <<Data type>> | <<Default value>>
*------------------+-----------------------+------------------------+-----------+------------------------+
  packageName      | deb.package.name          | Package name           | String        | \$\{project.artifactId\}
*------------------+-----------------------+------------------------+-----------+------------------------+
  packageVersion   | deb.package.version       | Package version        | String        | \$\{project.version\}
*------------------+-----------------------+------------------------+-----------+------------------------+
  packageRevision  | deb.package.revision      | Package revision       | String        | 1
*------------------+-----------------------+------------------------+-----------+------------------------+
  packagePriority  | deb.package.priority      | Installation priority  | String        | optional
*------------------+-----------------------+------------------------+-----------+------------------------+
  packageSection   | deb.package.section       | Repository section     | String        | contrib/utils
*------------------+-----------------------+------------------------+-----------+------------------------+
  packageTitle     | deb.package.title         | Short package description | String     | \$\{project.name\}
*------------------+-----------------------+------------------------+-----------+------------------------+
  packageDescription | deb.package.description | Extended package description | String  | \$\{project.description\}
*------------------+-----------------------+------------------------+-----------+------------------------+
  packageDependencies |                        | Dependencies to other packages | String\[\] |
*------------------+-----------------------+------------------------+-----------+------------------------+
  projectUrl       | deb.project.url           | Project website        | String        | \$\{project.organization.url\}
*------------------+-----------------------+------------------------+-----------+------------------------+
  projectOrganization | deb.project.organization | Organization for Debian control file | String | \$\{project.organization.name\}
*------------------+-----------------------+------------------------+-----------+------------------------+
  maintainerName   | deb.maintatier.name       | Package maintainer's name | String     | \$\{project.developers\[0\].name\}
*------------------+-----------------------+------------------------+-----------+------------------------+
  maintainerEmail  | deb.maintatier.email      | Package maintainer's email address | String | \$\{project.developers\[0\].email\}
*------------------+-----------------------+------------------------+-----------+------------------------+
  includeJar       | deb.include.jar           | JAR file to be included (ignored if includeJars is provided) | String  | \$\{project.artifactId\}-\$\{project.version\}.jar
*------------------+-----------------------+------------------------+-----------+------------------------+
  includeJars      |                           | JAR files to be included | String\[\]  |
*------------------+-----------------------+------------------------+-----------+------------------------+
  excludeAllJars   | deb.exclude.all-jars      | If true, no JARs are included | Boolean | false
*------------------+-----------------------+------------------------+-----------+------------------------+
  repository       | deb.repository.location | Location of the Debian repository | File |
*------------------+-----------------------+------------------------+-----------+------------------------+
  repositoryBranch | deb.repository.branch     | The codename of the distribution branch (e.g., lenny, natty, etc.) | String | experimental
*------------------+-----------------------+------------------------+-----------+------------------------+
  repreproConfigurotionDir | deb.reprepro.config | Reprepro configuration directory | File |
*------------------+-----------------------+------------------------+-----------+------------------------+

* Adding package content

** Adding JARs

	The JARs mentioned in the <<<jars>>> configuration argument are added to
the Debian package in the directory <<</usr/share/lib/$\{packageName\}/>>>. If
there is no <<<jars>>> argument, the JAR name will be guessed. If a JAR contains
the project version number, a symbolic link without the version number will be
added.

** Adding man pages

	The plugin searches for man page source files in the directory <<<src/deb/man>>>.
The files are automatically compiled, using <<<groff>>>. The source files must be named
<<<pagename.N>>>, where <<<N>>> is the
{{{http://unix.stackexchange.com/questions/3586/what-do-the-numbers-in-a-man-page-mean}section number}}.
The compiled man pages are gzip'ed and included in the appropriate place in the deb file.
Here are some pointers for help writing man pages:

	* Wikipedia page on man pages: {{http://en.wikipedia.org/wiki/Man_page}}

	* A short howto: {{http://www.linuxhowtos.org/System/creatingman.htm}}

	* A somewhat more extensive howto: {{http://www.schweikhardt.net/man_page_howto.html}}

	[]

** Adding other files

	The plugin does not take care of files other than JARs.
However, it can be used in conjunction with other plugins to take care of that.
The stage directory for the Debian package is <<<target/deb>>>, so any files
copied into that directory during the build process are included in the Debian package.

	I recommend the Maven Resources Plugin to copy resources into the stage
directory. The following is an example configuration.

+----------------------------
<build>
  <plugins>
    ...

    <plugin>
      <!--
        This plugin's configuration must come *before* the Debian Maven
        Plugin.
      -->
      <artifactId>maven-resources-plugin</artifactId>
      <version>2.3</version>
      <executions>
        <execution>
          <id>copy-deb-resources</id>
          <phase>process-resources</phase>
          <goals><goal>copy-resources</goal></goals>
          <configuration>
            <overwrite>true</overwrite>
            <outputDirectory>${basedir}/target/deb</outputDirectory>
            <resources>
              <resource>
                <directory>src/deb/resources</directory>
		<!-- Uncomment the following line to enable Velocity filtering. -->
		<!--
                <filtering>true</filtering>
		-->
              </resource>
            </resources>
          </configuration>
        </execution>
      </executions>
    </plugin>

    ...
  </plugins>
</build>
+----------------------------

	<<IMPORTANT:>> plugins in the same phase run in the order in which they
are mentioned in the POM. This means that the Maven Resources Plugin must be
included <<above>> the Debian Maven Plugin!

	Unfortunately, the Maven Resources Plugin does not retain Unix file
permissions, meaning that all executable files lose their execution permission
after copying. A workaround is to use the Maven Antrun Plugin to re-enable
execution of all relevant files. An example configuration to do so is the
following:

+----------------------------
<build>
  <plugins>
    ...

    <plugin>
      <!--
        This plugin's configuration must come *after* the Maven Resources
        Plugin, and *before* the Debian Maven Plugin.
      -->
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-antrun-plugin</artifactId>
      <version>1.6</version>
      <executions>
        <execution>
          <id>fix-permissions</id>
          <phase>package</phase>
          <configuration>
            <target>
              <chmod perm="ugo+x">
                <fileset dir="${basedir}/target/deb">
                  <include name="**/bin/**"/>
                  <include name="**/sbin/**"/>
                  <include name="DEBIAN/post*"/>
                  <include name="DEBIAN/pre*"/>
                </fileset>
              </chmod>
            </target>
          </configuration>
          <goals><goal>run</goal></goals>
        </execution>
      </executions>
    </plugin>

    ...
  </plugins>
</build>
+----------------------------

** Deploying

	The plugin can use reprepro to deploy the Debian package to a local
reprepro repository. The plugin assumes an existing reprepro repository and
configuration, and requires pointers to their locations. The plugin uses the
following parameters:

	* repository (the repository location)

	* repreproConfigurationDir (the reprepro configuration directory)

	* repositoryBranch (optional)

	[]
